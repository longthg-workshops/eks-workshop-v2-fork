AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a code-server IDE for the EKS workshop
Parameters:
  InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume.
    Default: 30
  RepositoryOwner:
    Type: String
    Description: The owner of the GitHub repository to be used to bootstrap Cloud9
    Default: "longthg-workshops"
  RepositoryName:
    Type: String
    Description: The name of the GitHub repository to be used to bootstrap Cloud9
    Default: "eks-workshop-v2-fork"
  RepositoryRef:
    Type: String
    Description: The Git reference to be used to bootstrap Cloud9
    Default: "cloud-ide"
  ResourcesPrecreated:
    Type: String
    Description: Whether lab infrastructure has been pre-provisioned
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
  AnalyticsEndpoint:
    Type: String
    Description: Analytics endpoint used for AWS events
    Default: ""
  CodeServerVersion:
    Type: String
    Description: Default code-server version to use
    Default: "4.91.1"
  AmiParameterStoreName:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
  Environment:
    Type: String
    Description: For testing purposes only
    Default: ""

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for IDE
      SecurityGroupIngress:
        - Description: Allow SSH from anywhere
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  EksWorkshopIdeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ""
              - - EksWorkshopIdeLambdaPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: "*"

  EksWorkshopIdeBootstrapInstanceLambda:
    Type: Custom::EksWorkshopIdeBootstrapInstanceLambda
    DependsOn:
      - EksWorkshopIdeLambdaExecutionRole
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - EksWorkshopIdeBootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      InstanceId:
        Ref: EksWorkshopIdeInstance
      SsmDocument:
        Ref: EksWorkshopIdeSSMDocument
      #UpdateTrigger:
      #  Ref: UpdateTrigger

  EksWorkshopIdeBootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - EksWorkshopIdeLambdaExecutionRole
          - Arn
      Runtime: python3.12
      Environment:
        Variables:
          DiskSize:
            Ref: InstanceVolumeSize
      MemorySize: 256
      Timeout: "900"
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging
          logger = logging.getLogger(__name__)

          def lambda_handler(event, context):
              print(event.values())
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS
              
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              
              else:
                  try:
                      # Open AWS clients
                      #ec2 = boto3.client('ec2')
                      ssm = boto3.client('ssm')

                      instance_id = event['ResourceProperties']['InstanceId']

                      ssm_document = event['ResourceProperties']['SsmDocument']

                      print('Sending SSM command...')

                      response = ssm.send_command(
                        InstanceIds=[instance_id],
                        DocumentName=ssm_document)

                      command_id = response['Command']['CommandId']

                      waiter = ssm.get_waiter('command_executed')

                      waiter.wait(
                        CommandId=command_id,
                        InstanceId=instance_id,
                        WaiterConfig={
                          'Delay': 10,
                          'MaxAttempts': 60
                        }
                      )

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc(e)}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

  EksWorkshopIdeSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: "2.2"
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: EksWorkshopIdebootstrap
            inputs:
              runCommand:
                - !Sub |
                  #!/bin/bash
                  AWS_REGION="${AWS::Region}"
                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/installer.sh | bash
                  sudo -E -H -u ubuntu bash -c "curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/setup.sh | bash"
                  curl -fOL https://github.com/coder/code-server/releases/download/v${CodeServerVersion}/code-server_${CodeServerVersion}_amd64.deb
                  sudo dpkg -i code-server_${CodeServerVersion}_amd64.deb
                  sudo systemctl enable --now code-server@ubuntu
                  sleep 30
                  sed -i.bak 's/auth: password/auth: none/' /home/ubuntu/.config/code-server/config.yaml
                  sudo systemctl restart code-server@ubuntu
                - ENVIRONMENT: !Ref LocalFolder
                  REPOSITORY_OWNER: !Ref RepositoryOwner
                  REPOSITORY_NAME: !Ref RepositoryName
                  REPOSITORY_REF: !Ref RepositoryRef
                  RESOURCES_PRECREATED: !Ref ResourcesPrecreated

  EKSVSCodeServerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EKSVSCodeServerIAMRole

  EksWorkshopIamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref EksWorkshopIdeRole
      ManagedPolicyName: !Sub ${AWS::StackName}-iam
      PolicyDocument:
        file: ./iam/policies/iam.yaml

  EksWorkshopBasePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref EksWorkshopIdeRole
      ManagedPolicyName: !Sub ${AWS::StackName}-base
      PolicyDocument:
        file: ./iam/policies/base.yaml

  EksWorkshopEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref EksWorkshopIdeRole
      ManagedPolicyName: !Sub ${AWS::StackName}-ec2
      PolicyDocument:
        file: ./iam/policies/ec2.yaml

  EksWorkshopLabsPolicy1:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - EksWorkshopIdeRole
    Properties:
      Roles:
        - !Ref EksWorkshopIdeRole
      ManagedPolicyName: !Sub ${AWS::StackName}-labs1
      PolicyDocument:
        file: ./iam/policies/labs1.yaml

  EksWorkshopLabsPolicy2:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - EksWorkshopIdeRole
    Properties:
      Roles:
        - !Ref EksWorkshopIdeRole
      ManagedPolicyName: !Sub ${AWS::StackName}-labs2
      PolicyDocument:
        file: ./iam/policies/labs2.yaml

  EksWorkshopIdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: EksWorkshopIdeRole

  EksWorkshopIdeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiParameterStoreName
      InstanceType: t3.medium
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/xvda
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EksWorkshopIdeInstanceProfile
      Tags:
        - Key: type
          Value: eksworkshop-ide

Outputs:
  IdeRole:
    Value: !Sub ${EKSVSCodeServerIAMRole.Arn}